
Clock.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000076  00800100  00000be8  00000c7c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000be8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000025  00800176  00800176  00000cf2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000cf2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000d24  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000170  00000000  00000000  00000d64  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001746  00000000  00000000  00000ed4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000cd5  00000000  00000000  0000261a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001185  00000000  00000000  000032ef  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000338  00000000  00000000  00004474  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000711  00000000  00000000  000047ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000b07  00000000  00000000  00004ebd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000138  00000000  00000000  000059c4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 4b 03 	jmp	0x696	; 0x696 <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 ee       	ldi	r30, 0xE8	; 232
  7c:	fb e0       	ldi	r31, 0x0B	; 11
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 37       	cpi	r26, 0x76	; 118
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a6 e7       	ldi	r26, 0x76	; 118
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	ab 39       	cpi	r26, 0x9B	; 155
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 51 02 	call	0x4a2	; 0x4a2 <main>
  9e:	0c 94 f2 05 	jmp	0xbe4	; 0xbe4 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <FND_shift_out>:
	FND_COM_DDR &= 0b11001111; //특정비트만 클리어 -> 해당 비트만 0 주고 엔드연산
	FND_update_time(msec, sec);
	*/
	
	FND4digit_init_shiftR();
	Timer0_init();
  a6:	2c 98       	cbi	0x05, 4	; 5
  a8:	40 e0       	ldi	r20, 0x00	; 0
  aa:	50 e0       	ldi	r21, 0x00	; 0
  ac:	68 2f       	mov	r22, r24
  ae:	70 e0       	ldi	r23, 0x00	; 0
  b0:	2d 98       	cbi	0x05, 5	; 5
  b2:	2b 98       	cbi	0x05, 3	; 5
  b4:	95 b1       	in	r25, 0x05	; 5
  b6:	9b 01       	movw	r18, r22
  b8:	04 2e       	mov	r0, r20
  ba:	02 c0       	rjmp	.+4      	; 0xc0 <FND_shift_out+0x1a>
  bc:	35 95       	asr	r19
  be:	27 95       	ror	r18
  c0:	0a 94       	dec	r0
  c2:	e2 f7       	brpl	.-8      	; 0xbc <FND_shift_out+0x16>
  c4:	21 70       	andi	r18, 0x01	; 1
  c6:	33 27       	eor	r19, r19
  c8:	22 0f       	add	r18, r18
  ca:	33 1f       	adc	r19, r19
  cc:	22 0f       	add	r18, r18
  ce:	33 1f       	adc	r19, r19
  d0:	22 0f       	add	r18, r18
  d2:	33 1f       	adc	r19, r19
  d4:	29 2b       	or	r18, r25
  d6:	25 b9       	out	0x05, r18	; 5
  d8:	2d 9a       	sbi	0x05, 5	; 5
  da:	4f 5f       	subi	r20, 0xFF	; 255
  dc:	5f 4f       	sbci	r21, 0xFF	; 255
  de:	48 30       	cpi	r20, 0x08	; 8
  e0:	51 05       	cpc	r21, r1
  e2:	31 f7       	brne	.-52     	; 0xb0 <FND_shift_out+0xa>
  e4:	2c 9a       	sbi	0x05, 4	; 5
  e6:	08 95       	ret

000000e8 <FND_update_value>:
  e8:	cf 93       	push	r28
  ea:	df 93       	push	r29
  ec:	ec 01       	movw	r28, r24
  ee:	e5 e8       	ldi	r30, 0x85	; 133
  f0:	f1 e0       	ldi	r31, 0x01	; 1
  f2:	2a e0       	ldi	r18, 0x0A	; 10
  f4:	30 e0       	ldi	r19, 0x00	; 0
  f6:	b9 01       	movw	r22, r18
  f8:	0e 94 a8 05 	call	0xb50	; 0xb50 <__divmodhi4>
  fc:	dc 01       	movw	r26, r24
  fe:	ac 5f       	subi	r26, 0xFC	; 252
 100:	be 4f       	sbci	r27, 0xFE	; 254
 102:	8c 91       	ld	r24, X
 104:	80 83       	st	Z, r24
 106:	cb 01       	movw	r24, r22
 108:	b9 01       	movw	r22, r18
 10a:	0e 94 a8 05 	call	0xb50	; 0xb50 <__divmodhi4>
 10e:	dc 01       	movw	r26, r24
 110:	ac 5f       	subi	r26, 0xFC	; 252
 112:	be 4f       	sbci	r27, 0xFE	; 254
 114:	8c 91       	ld	r24, X
 116:	81 83       	std	Z+1, r24	; 0x01
 118:	ce 01       	movw	r24, r28
 11a:	64 e6       	ldi	r22, 0x64	; 100
 11c:	70 e0       	ldi	r23, 0x00	; 0
 11e:	0e 94 a8 05 	call	0xb50	; 0xb50 <__divmodhi4>
 122:	cb 01       	movw	r24, r22
 124:	b9 01       	movw	r22, r18
 126:	0e 94 a8 05 	call	0xb50	; 0xb50 <__divmodhi4>
 12a:	dc 01       	movw	r26, r24
 12c:	ac 5f       	subi	r26, 0xFC	; 252
 12e:	be 4f       	sbci	r27, 0xFE	; 254
 130:	8c 91       	ld	r24, X
 132:	82 83       	std	Z+2, r24	; 0x02
 134:	ce 01       	movw	r24, r28
 136:	68 ee       	ldi	r22, 0xE8	; 232
 138:	73 e0       	ldi	r23, 0x03	; 3
 13a:	0e 94 a8 05 	call	0xb50	; 0xb50 <__divmodhi4>
 13e:	cb 01       	movw	r24, r22
 140:	b9 01       	movw	r22, r18
 142:	0e 94 a8 05 	call	0xb50	; 0xb50 <__divmodhi4>
 146:	dc 01       	movw	r26, r24
 148:	ac 5f       	subi	r26, 0xFC	; 252
 14a:	be 4f       	sbci	r27, 0xFE	; 254
 14c:	8c 91       	ld	r24, X
 14e:	83 83       	std	Z+3, r24	; 0x03
 150:	df 91       	pop	r29
 152:	cf 91       	pop	r28
 154:	08 95       	ret

00000156 <FND4digit_init_shiftR>:
 156:	8a b1       	in	r24, 0x0a	; 10
 158:	80 6f       	ori	r24, 0xF0	; 240
 15a:	8a b9       	out	0x0a, r24	; 10
 15c:	8b b1       	in	r24, 0x0b	; 11
 15e:	8f 70       	andi	r24, 0x0F	; 15
 160:	8b b9       	out	0x0b, r24	; 11
 162:	84 b1       	in	r24, 0x04	; 4
 164:	88 63       	ori	r24, 0x38	; 56
 166:	84 b9       	out	0x04, r24	; 4
 168:	2c 9a       	sbi	0x05, 4	; 5
 16a:	80 e0       	ldi	r24, 0x00	; 0
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	0e 94 74 00 	call	0xe8	; 0xe8 <FND_update_value>
 172:	08 95       	ret

00000174 <FND_update_time>:
	FND[3] = FND4digit_font[number /1000 % 10];
	return;
}

void FND_update_time(int msec, char sec)
{
 174:	0f 93       	push	r16
 176:	1f 93       	push	r17
 178:	cf 93       	push	r28
 17a:	df 93       	push	r29
 17c:	8c 01       	movw	r16, r24
 17e:	26 2f       	mov	r18, r22
	FND[0] = FND4digit_font[msec /10 % 10];
 180:	c5 e8       	ldi	r28, 0x85	; 133
 182:	d1 e0       	ldi	r29, 0x01	; 1
 184:	ea e0       	ldi	r30, 0x0A	; 10
 186:	f0 e0       	ldi	r31, 0x00	; 0
 188:	bf 01       	movw	r22, r30
 18a:	0e 94 a8 05 	call	0xb50	; 0xb50 <__divmodhi4>
 18e:	cb 01       	movw	r24, r22
 190:	bf 01       	movw	r22, r30
 192:	0e 94 a8 05 	call	0xb50	; 0xb50 <__divmodhi4>
 196:	dc 01       	movw	r26, r24
 198:	ac 5f       	subi	r26, 0xFC	; 252
 19a:	be 4f       	sbci	r27, 0xFE	; 254
 19c:	8c 91       	ld	r24, X
 19e:	88 83       	st	Y, r24
	FND[1] = FND4digit_font[msec /100 % 10];
 1a0:	c8 01       	movw	r24, r16
 1a2:	64 e6       	ldi	r22, 0x64	; 100
 1a4:	70 e0       	ldi	r23, 0x00	; 0
 1a6:	0e 94 a8 05 	call	0xb50	; 0xb50 <__divmodhi4>
 1aa:	cb 01       	movw	r24, r22
 1ac:	bf 01       	movw	r22, r30
 1ae:	0e 94 a8 05 	call	0xb50	; 0xb50 <__divmodhi4>
 1b2:	fc 01       	movw	r30, r24
 1b4:	ec 5f       	subi	r30, 0xFC	; 252
 1b6:	fe 4f       	sbci	r31, 0xFE	; 254
 1b8:	80 81       	ld	r24, Z
 1ba:	89 83       	std	Y+1, r24	; 0x01
	FND[2] = FND4digit_font[sec % 10] & (~(1<< FND_p));
 1bc:	8d ec       	ldi	r24, 0xCD	; 205
 1be:	28 9f       	mul	r18, r24
 1c0:	e1 2d       	mov	r30, r1
 1c2:	11 24       	eor	r1, r1
 1c4:	e6 95       	lsr	r30
 1c6:	e6 95       	lsr	r30
 1c8:	e6 95       	lsr	r30
 1ca:	3e 2f       	mov	r19, r30
 1cc:	33 0f       	add	r19, r19
 1ce:	93 2f       	mov	r25, r19
 1d0:	99 0f       	add	r25, r25
 1d2:	99 0f       	add	r25, r25
 1d4:	93 0f       	add	r25, r19
 1d6:	29 1b       	sub	r18, r25
 1d8:	a2 2f       	mov	r26, r18
 1da:	b0 e0       	ldi	r27, 0x00	; 0
 1dc:	ac 5f       	subi	r26, 0xFC	; 252
 1de:	be 4f       	sbci	r27, 0xFE	; 254
 1e0:	9c 91       	ld	r25, X
 1e2:	9d 7f       	andi	r25, 0xFD	; 253
 1e4:	9a 83       	std	Y+2, r25	; 0x02
	FND[3] = FND4digit_font[sec /10 % 10];
 1e6:	e8 9f       	mul	r30, r24
 1e8:	81 2d       	mov	r24, r1
 1ea:	11 24       	eor	r1, r1
 1ec:	86 95       	lsr	r24
 1ee:	86 95       	lsr	r24
 1f0:	86 95       	lsr	r24
 1f2:	88 0f       	add	r24, r24
 1f4:	98 2f       	mov	r25, r24
 1f6:	99 0f       	add	r25, r25
 1f8:	99 0f       	add	r25, r25
 1fa:	89 0f       	add	r24, r25
 1fc:	e8 1b       	sub	r30, r24
 1fe:	f0 e0       	ldi	r31, 0x00	; 0
 200:	ec 5f       	subi	r30, 0xFC	; 252
 202:	fe 4f       	sbci	r31, 0xFE	; 254
 204:	80 81       	ld	r24, Z
 206:	8b 83       	std	Y+3, r24	; 0x03
	return;
}
 208:	df 91       	pop	r29
 20a:	cf 91       	pop	r28
 20c:	1f 91       	pop	r17
 20e:	0f 91       	pop	r16
 210:	08 95       	ret

00000212 <FND_clock>:

void FND_clock(char sec, char min)
{
 212:	cf 93       	push	r28
 214:	df 93       	push	r29
	FND[0] = FND4digit_font[sec % 10];
 216:	a5 e8       	ldi	r26, 0x85	; 133
 218:	b1 e0       	ldi	r27, 0x01	; 1
 21a:	9d ec       	ldi	r25, 0xCD	; 205
 21c:	89 9f       	mul	r24, r25
 21e:	e1 2d       	mov	r30, r1
 220:	11 24       	eor	r1, r1
 222:	e6 95       	lsr	r30
 224:	e6 95       	lsr	r30
 226:	e6 95       	lsr	r30
 228:	3e 2f       	mov	r19, r30
 22a:	33 0f       	add	r19, r19
 22c:	23 2f       	mov	r18, r19
 22e:	22 0f       	add	r18, r18
 230:	22 0f       	add	r18, r18
 232:	23 0f       	add	r18, r19
 234:	82 1b       	sub	r24, r18
 236:	c8 2f       	mov	r28, r24
 238:	d0 e0       	ldi	r29, 0x00	; 0
 23a:	cc 5f       	subi	r28, 0xFC	; 252
 23c:	de 4f       	sbci	r29, 0xFE	; 254
 23e:	88 81       	ld	r24, Y
 240:	8c 93       	st	X, r24
	FND[1] = FND4digit_font[sec /10 % 10];
 242:	e9 9f       	mul	r30, r25
 244:	81 2d       	mov	r24, r1
 246:	11 24       	eor	r1, r1
 248:	86 95       	lsr	r24
 24a:	86 95       	lsr	r24
 24c:	86 95       	lsr	r24
 24e:	88 0f       	add	r24, r24
 250:	28 2f       	mov	r18, r24
 252:	22 0f       	add	r18, r18
 254:	22 0f       	add	r18, r18
 256:	82 0f       	add	r24, r18
 258:	e8 1b       	sub	r30, r24
 25a:	f0 e0       	ldi	r31, 0x00	; 0
 25c:	ec 5f       	subi	r30, 0xFC	; 252
 25e:	fe 4f       	sbci	r31, 0xFE	; 254
 260:	80 81       	ld	r24, Z
 262:	11 96       	adiw	r26, 0x01	; 1
 264:	8c 93       	st	X, r24
 266:	11 97       	sbiw	r26, 0x01	; 1
	FND[2] = FND4digit_font[min % 10];
 268:	69 9f       	mul	r22, r25
 26a:	e1 2d       	mov	r30, r1
 26c:	11 24       	eor	r1, r1
 26e:	e6 95       	lsr	r30
 270:	e6 95       	lsr	r30
 272:	e6 95       	lsr	r30
 274:	2e 2f       	mov	r18, r30
 276:	22 0f       	add	r18, r18
 278:	82 2f       	mov	r24, r18
 27a:	88 0f       	add	r24, r24
 27c:	88 0f       	add	r24, r24
 27e:	82 0f       	add	r24, r18
 280:	68 1b       	sub	r22, r24
 282:	c6 2f       	mov	r28, r22
 284:	d0 e0       	ldi	r29, 0x00	; 0
 286:	cc 5f       	subi	r28, 0xFC	; 252
 288:	de 4f       	sbci	r29, 0xFE	; 254
 28a:	88 81       	ld	r24, Y
 28c:	12 96       	adiw	r26, 0x02	; 2
 28e:	8c 93       	st	X, r24
 290:	12 97       	sbiw	r26, 0x02	; 2
	FND[3] = FND4digit_font[min /10 % 10];
 292:	e9 9f       	mul	r30, r25
 294:	91 2d       	mov	r25, r1
 296:	11 24       	eor	r1, r1
 298:	96 95       	lsr	r25
 29a:	96 95       	lsr	r25
 29c:	96 95       	lsr	r25
 29e:	99 0f       	add	r25, r25
 2a0:	89 2f       	mov	r24, r25
 2a2:	88 0f       	add	r24, r24
 2a4:	88 0f       	add	r24, r24
 2a6:	98 0f       	add	r25, r24
 2a8:	e9 1b       	sub	r30, r25
 2aa:	f0 e0       	ldi	r31, 0x00	; 0
 2ac:	ec 5f       	subi	r30, 0xFC	; 252
 2ae:	fe 4f       	sbci	r31, 0xFE	; 254
 2b0:	80 81       	ld	r24, Z
 2b2:	13 96       	adiw	r26, 0x03	; 3
 2b4:	8c 93       	st	X, r24
	return;
 2b6:	df 91       	pop	r29
 2b8:	cf 91       	pop	r28
 2ba:	08 95       	ret

000002bc <clock_Keypad_init>:
	
	return;
}
void clock_Keypad_init(void)
{
	Keypad_PIN_DDR &= 0b11110000; //포트B 하위 4bit 입력으로 설정
 2bc:	8a b1       	in	r24, 0x0a	; 10
 2be:	80 7f       	andi	r24, 0xF0	; 240
 2c0:	8a b9       	out	0x0a, r24	; 10
	Keypad_PIN_PORT |= 0b00001111; //내부 풀업저항 사용하겠다는 설정
 2c2:	8b b1       	in	r24, 0x0b	; 11
 2c4:	8f 60       	ori	r24, 0x0F	; 15
 2c6:	8b b9       	out	0x0b, r24	; 11
 2c8:	08 95       	ret

000002ca <Keyscan_sub>:
	return;
}

char Keyscan_sub(void)
{
	if(!(Keypad_PIN & 0b00000001)) return 1; //키가 눌렸을때
 2ca:	48 9b       	sbis	0x09, 0	; 9
 2cc:	08 c0       	rjmp	.+16     	; 0x2de <Keyscan_sub+0x14>
	else if(!(Keypad_PIN & 0b00000010)) return 2;
 2ce:	49 9b       	sbis	0x09, 1	; 9
 2d0:	08 c0       	rjmp	.+16     	; 0x2e2 <Keyscan_sub+0x18>
	else if(!(Keypad_PIN & 0b00000100)) return 3;
 2d2:	4a 9b       	sbis	0x09, 2	; 9
 2d4:	08 c0       	rjmp	.+16     	; 0x2e6 <Keyscan_sub+0x1c>
	else if(!(Keypad_PIN & 0b00001000)) return 4;
 2d6:	4b 9b       	sbis	0x09, 3	; 9
 2d8:	08 c0       	rjmp	.+16     	; 0x2ea <Keyscan_sub+0x20>
	else return 0;
 2da:	80 e0       	ldi	r24, 0x00	; 0
 2dc:	08 95       	ret
	return;
}

char Keyscan_sub(void)
{
	if(!(Keypad_PIN & 0b00000001)) return 1; //키가 눌렸을때
 2de:	81 e0       	ldi	r24, 0x01	; 1
 2e0:	08 95       	ret
	else if(!(Keypad_PIN & 0b00000010)) return 2;
 2e2:	82 e0       	ldi	r24, 0x02	; 2
 2e4:	08 95       	ret
	else if(!(Keypad_PIN & 0b00000100)) return 3;
 2e6:	83 e0       	ldi	r24, 0x03	; 3
 2e8:	08 95       	ret
	else if(!(Keypad_PIN & 0b00001000)) return 4;
 2ea:	84 e0       	ldi	r24, 0x04	; 4
	else return 0;
}
 2ec:	08 95       	ret

000002ee <cook_timer_process>:
	}
	return;
}

void clock_process(char key_value)
{
 2ee:	83 30       	cpi	r24, 0x03	; 3
 2f0:	99 f0       	breq	.+38     	; 0x318 <cook_timer_process+0x2a>
 2f2:	84 30       	cpi	r24, 0x04	; 4
 2f4:	01 f1       	breq	.+64     	; 0x336 <cook_timer_process+0x48>
 2f6:	82 30       	cpi	r24, 0x02	; 2
 2f8:	09 f5       	brne	.+66     	; 0x33c <cook_timer_process+0x4e>
 2fa:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <cook_sec>
 2fe:	8f 5f       	subi	r24, 0xFF	; 255
 300:	80 93 7a 01 	sts	0x017A, r24	; 0x80017a <cook_sec>
 304:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <cook_sec>
 308:	8c 33       	cpi	r24, 0x3C	; 60
 30a:	10 f0       	brcs	.+4      	; 0x310 <cook_timer_process+0x22>
 30c:	10 92 7a 01 	sts	0x017A, r1	; 0x80017a <cook_sec>
 310:	81 e0       	ldi	r24, 0x01	; 1
 312:	80 93 98 01 	sts	0x0198, r24	; 0x800198 <time_print_flag>
 316:	08 95       	ret
 318:	80 91 79 01 	lds	r24, 0x0179	; 0x800179 <cook_min>
 31c:	8f 5f       	subi	r24, 0xFF	; 255
 31e:	80 93 79 01 	sts	0x0179, r24	; 0x800179 <cook_min>
 322:	80 91 79 01 	lds	r24, 0x0179	; 0x800179 <cook_min>
 326:	8c 33       	cpi	r24, 0x3C	; 60
 328:	10 f0       	brcs	.+4      	; 0x32e <cook_timer_process+0x40>
 32a:	10 92 79 01 	sts	0x0179, r1	; 0x800179 <cook_min>
 32e:	81 e0       	ldi	r24, 0x01	; 1
 330:	80 93 98 01 	sts	0x0198, r24	; 0x800198 <time_print_flag>
 334:	08 95       	ret
 336:	81 e0       	ldi	r24, 0x01	; 1
 338:	80 93 90 01 	sts	0x0190, r24	; 0x800190 <countdown_flag>
 33c:	08 95       	ret

0000033e <stop_watch_process>:
	}*/
	return;
}

void stop_watch_process(char key_value) {
	switch(key_value)
 33e:	83 30       	cpi	r24, 0x03	; 3
 340:	61 f0       	breq	.+24     	; 0x35a <stop_watch_process+0x1c>
 342:	84 30       	cpi	r24, 0x04	; 4
 344:	c1 f0       	breq	.+48     	; 0x376 <stop_watch_process+0x38>
 346:	82 30       	cpi	r24, 0x02	; 2
 348:	39 f5       	brne	.+78     	; 0x398 <stop_watch_process+0x5a>
			mode = CLOCK_MODE;
			time_print_flag = 1;
			//FND_clock(sec, min);
			break;*/
		case BTN_CLEAR : //clear //clear 버튼이 따로 있기 때문에 굳이 flag 쓰지 않아도 된다
			clear_flag = 1;
 34a:	81 e0       	ldi	r24, 0x01	; 1
 34c:	80 93 9a 01 	sts	0x019A, r24	; 0x80019a <clear_flag>
			stop_start_flag = 0;
 350:	10 92 8d 01 	sts	0x018D, r1	; 0x80018d <stop_start_flag>
			w_flag = 0;
 354:	10 92 8e 01 	sts	0x018E, r1	; 0x80018e <w_flag>
			break;
 358:	08 95       	ret
		case BTN_LAP : //lap
			stop_start_flag = 1;
 35a:	81 e0       	ldi	r24, 0x01	; 1
 35c:	80 93 8d 01 	sts	0x018D, r24	; 0x80018d <stop_start_flag>
			if(w_flag == 0)w_flag = 1;
 360:	80 91 8e 01 	lds	r24, 0x018E	; 0x80018e <w_flag>
 364:	81 11       	cpse	r24, r1
 366:	04 c0       	rjmp	.+8      	; 0x370 <stop_watch_process+0x32>
 368:	81 e0       	ldi	r24, 0x01	; 1
 36a:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <w_flag>
 36e:	08 95       	ret
			else w_flag = 0;
 370:	10 92 8e 01 	sts	0x018E, r1	; 0x80018e <w_flag>
 374:	08 95       	ret
			break;
		case BTN_START_STOP :
			if(stop_start_flag == 0)stop_start_flag = 1;
 376:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <stop_start_flag>
 37a:	81 11       	cpse	r24, r1
 37c:	04 c0       	rjmp	.+8      	; 0x386 <stop_watch_process+0x48>
 37e:	81 e0       	ldi	r24, 0x01	; 1
 380:	80 93 8d 01 	sts	0x018D, r24	; 0x80018d <stop_start_flag>
 384:	02 c0       	rjmp	.+4      	; 0x38a <stop_watch_process+0x4c>
			else stop_start_flag = 0;
 386:	10 92 8d 01 	sts	0x018D, r1	; 0x80018d <stop_start_flag>
			w_flag = 1;
 38a:	81 e0       	ldi	r24, 0x01	; 1
 38c:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <w_flag>
			time_print_flag = 1;
 390:	80 93 98 01 	sts	0x0198, r24	; 0x800198 <time_print_flag>
			beep(1);
 394:	0e 94 25 03 	call	0x64a	; 0x64a <beep>
 398:	08 95       	ret

0000039a <modify_process>:
}


void modify_process(char key_value) {
	
	switch(key_value)
 39a:	83 30       	cpi	r24, 0x03	; 3
 39c:	41 f1       	breq	.+80     	; 0x3ee <modify_process+0x54>
 39e:	84 30       	cpi	r24, 0x04	; 4
 3a0:	09 f4       	brne	.+2      	; 0x3a4 <modify_process+0xa>
 3a2:	45 c0       	rjmp	.+138    	; 0x42e <__LOCK_REGION_LENGTH__+0x2e>
 3a4:	82 30       	cpi	r24, 0x02	; 2
 3a6:	09 f0       	breq	.+2      	; 0x3aa <modify_process+0x10>
 3a8:	4c c0       	rjmp	.+152    	; 0x442 <__LOCK_REGION_LENGTH__+0x42>
			mode = COOK_TIMER_MODE;
			FND_clock(cook_sec, cook_min);
			break;
		*/
		case BTN_DEC : //감소
			if(cursor) { // == CURSOR_HOUR
 3aa:	80 91 8a 01 	lds	r24, 0x018A	; 0x80018a <cursor>
 3ae:	88 23       	and	r24, r24
 3b0:	69 f0       	breq	.+26     	; 0x3cc <modify_process+0x32>
				hour--;
 3b2:	80 91 7b 01 	lds	r24, 0x017B	; 0x80017b <hour>
 3b6:	81 50       	subi	r24, 0x01	; 1
 3b8:	80 93 7b 01 	sts	0x017B, r24	; 0x80017b <hour>
				if(!hour) hour = 12; //hour가 0이되면 12로 변경
 3bc:	80 91 7b 01 	lds	r24, 0x017B	; 0x80017b <hour>
 3c0:	81 11       	cpse	r24, r1
 3c2:	11 c0       	rjmp	.+34     	; 0x3e6 <modify_process+0x4c>
 3c4:	8c e0       	ldi	r24, 0x0C	; 12
 3c6:	80 93 7b 01 	sts	0x017B, r24	; 0x80017b <hour>
 3ca:	0d c0       	rjmp	.+26     	; 0x3e6 <modify_process+0x4c>
			}
			else { // == CURSOR_MIN
				if(!min) min = 59;
 3cc:	80 91 7c 01 	lds	r24, 0x017C	; 0x80017c <min>
 3d0:	81 11       	cpse	r24, r1
 3d2:	04 c0       	rjmp	.+8      	; 0x3dc <modify_process+0x42>
 3d4:	8b e3       	ldi	r24, 0x3B	; 59
 3d6:	80 93 7c 01 	sts	0x017C, r24	; 0x80017c <min>
 3da:	05 c0       	rjmp	.+10     	; 0x3e6 <modify_process+0x4c>
				else min--;
 3dc:	80 91 7c 01 	lds	r24, 0x017C	; 0x80017c <min>
 3e0:	81 50       	subi	r24, 0x01	; 1
 3e2:	80 93 7c 01 	sts	0x017C, r24	; 0x80017c <min>
			}
			time_print_flag = 1;
 3e6:	81 e0       	ldi	r24, 0x01	; 1
 3e8:	80 93 98 01 	sts	0x0198, r24	; 0x800198 <time_print_flag>
			break;
 3ec:	08 95       	ret
		case BTN_INC : //증가 
			if(cursor) { // == CURSOR_HOUR
 3ee:	80 91 8a 01 	lds	r24, 0x018A	; 0x80018a <cursor>
 3f2:	88 23       	and	r24, r24
 3f4:	69 f0       	breq	.+26     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
				hour++;
 3f6:	80 91 7b 01 	lds	r24, 0x017B	; 0x80017b <hour>
 3fa:	8f 5f       	subi	r24, 0xFF	; 255
 3fc:	80 93 7b 01 	sts	0x017B, r24	; 0x80017b <hour>
				if(hour >= 13) hour = 1; //hour가 13이되면 1시
 400:	80 91 7b 01 	lds	r24, 0x017B	; 0x80017b <hour>
 404:	8d 30       	cpi	r24, 0x0D	; 13
 406:	78 f0       	brcs	.+30     	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
 408:	81 e0       	ldi	r24, 0x01	; 1
 40a:	80 93 7b 01 	sts	0x017B, r24	; 0x80017b <hour>
 40e:	0b c0       	rjmp	.+22     	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
			}
			else { // == CURSOR_MIN
				min++;
 410:	80 91 7c 01 	lds	r24, 0x017C	; 0x80017c <min>
 414:	8f 5f       	subi	r24, 0xFF	; 255
 416:	80 93 7c 01 	sts	0x017C, r24	; 0x80017c <min>
				if(min >= 60) min = 0;
 41a:	80 91 7c 01 	lds	r24, 0x017C	; 0x80017c <min>
 41e:	8c 33       	cpi	r24, 0x3C	; 60
 420:	10 f0       	brcs	.+4      	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
 422:	10 92 7c 01 	sts	0x017C, r1	; 0x80017c <min>
			}
			time_print_flag = 1;
 426:	81 e0       	ldi	r24, 0x01	; 1
 428:	80 93 98 01 	sts	0x0198, r24	; 0x800198 <time_print_flag>
			break;
 42c:	08 95       	ret
		case BTN_CURSOR : //커서 이동
			if(cursor) cursor = 0; //CURSOR_MIN
 42e:	80 91 8a 01 	lds	r24, 0x018A	; 0x80018a <cursor>
 432:	88 23       	and	r24, r24
 434:	19 f0       	breq	.+6      	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
 436:	10 92 8a 01 	sts	0x018A, r1	; 0x80018a <cursor>
 43a:	08 95       	ret
			else cursor = 1; //CURSOR_HOUR
 43c:	81 e0       	ldi	r24, 0x01	; 1
 43e:	80 93 8a 01 	sts	0x018A, r24	; 0x80018a <cursor>
 442:	08 95       	ret

00000444 <alarm_process>:
	return;
}

void alarm_process(char key_value)
{
	switch(key_value) 
 444:	83 30       	cpi	r24, 0x03	; 3
 446:	99 f0       	breq	.+38     	; 0x46e <alarm_process+0x2a>
 448:	84 30       	cpi	r24, 0x04	; 4
 44a:	01 f1       	breq	.+64     	; 0x48c <alarm_process+0x48>
 44c:	82 30       	cpi	r24, 0x02	; 2
 44e:	41 f5       	brne	.+80     	; 0x4a0 <alarm_process+0x5c>
	{
		case BTN_ALARM_MIN_INC :
			alarm_min++;
 450:	80 91 99 01 	lds	r24, 0x0199	; 0x800199 <alarm_min>
 454:	8f 5f       	subi	r24, 0xFF	; 255
 456:	80 93 99 01 	sts	0x0199, r24	; 0x800199 <alarm_min>
			if(alarm_min >= 60) {
 45a:	80 91 99 01 	lds	r24, 0x0199	; 0x800199 <alarm_min>
 45e:	8c 33       	cpi	r24, 0x3C	; 60
 460:	10 f0       	brcs	.+4      	; 0x466 <alarm_process+0x22>
				alarm_min = 0;
 462:	10 92 99 01 	sts	0x0199, r1	; 0x800199 <alarm_min>
			}
			time_print_flag = 1;
 466:	81 e0       	ldi	r24, 0x01	; 1
 468:	80 93 98 01 	sts	0x0198, r24	; 0x800198 <time_print_flag>
			break;
 46c:	08 95       	ret
		case BTN_ALARM_HOUR_INC :
			alarm_hour++;
 46e:	80 91 8c 01 	lds	r24, 0x018C	; 0x80018c <alarm_hour>
 472:	8f 5f       	subi	r24, 0xFF	; 255
 474:	80 93 8c 01 	sts	0x018C, r24	; 0x80018c <alarm_hour>
			if(alarm_hour >= 13) {
 478:	80 91 8c 01 	lds	r24, 0x018C	; 0x80018c <alarm_hour>
 47c:	8d 30       	cpi	r24, 0x0D	; 13
 47e:	10 f0       	brcs	.+4      	; 0x484 <alarm_process+0x40>
				alarm_hour = 0;
 480:	10 92 8c 01 	sts	0x018C, r1	; 0x80018c <alarm_hour>
			}
			time_print_flag = 1;
 484:	81 e0       	ldi	r24, 0x01	; 1
 486:	80 93 98 01 	sts	0x0198, r24	; 0x800198 <time_print_flag>
			break;
 48a:	08 95       	ret
		case BTN_ALARM_ENABLE :
			if(alarm_enable_flag) alarm_enable_flag = 0;
 48c:	80 91 8f 01 	lds	r24, 0x018F	; 0x80018f <alarm_enable_flag>
 490:	88 23       	and	r24, r24
 492:	19 f0       	breq	.+6      	; 0x49a <alarm_process+0x56>
 494:	10 92 8f 01 	sts	0x018F, r1	; 0x80018f <alarm_enable_flag>
 498:	08 95       	ret
			else alarm_enable_flag = 1;
 49a:	81 e0       	ldi	r24, 0x01	; 1
 49c:	80 93 8f 01 	sts	0x018F, r24	; 0x80018f <alarm_enable_flag>
 4a0:	08 95       	ret

000004a2 <main>:
char long_key_flag;

int main(void)
{
	
    Timer0_init();
 4a2:	0e 94 8a 05 	call	0xb14	; 0xb14 <Timer0_init>
	Timer1_init_CTC_outA(); 
 4a6:	0e 94 98 05 	call	0xb30	; 0xb30 <Timer1_init_CTC_outA>
	clock_Keypad_init();
 4aa:	0e 94 5e 01 	call	0x2bc	; 0x2bc <clock_Keypad_init>
	FND4digit_init_shiftR();
 4ae:	0e 94 ab 00 	call	0x156	; 0x156 <FND4digit_init_shiftR>
	sei();
 4b2:	78 94       	sei
			{
				_delay_ms(1);
				if(Keyscan_sub())
				{
					if(speakout_flag) {
						speakout_flag = 0; music_i = 0; OCR1A = 0;
 4b4:	c8 e8       	ldi	r28, 0x88	; 136
 4b6:	d0 e0       	ldi	r29, 0x00	; 0
		}
		else 
		{
			if(Keyscan_sub() == 0) 
			{
				long_key_flag = 1;
 4b8:	11 e0       	ldi	r17, 0x01	; 1
					time_print_flag = 1;
					break;
					case STOP_WATCH_MODE :
					stop_start_flag = 0;
					clear_flag = 1;
					mode = ALARM_MODE;
 4ba:	68 94       	set
 4bc:	ee 24       	eor	r14, r14
 4be:	e2 f8       	bld	r14, 2
			long_key_keep_flag = 0;
			if(Keyscan_sub() == BTN_MODE) {
				switch(mode)
				{
					case CLOCK_MODE :
					mode = MODIFY_MODE;
 4c0:	0f 2e       	mov	r0, r31
 4c2:	f3 e0       	ldi	r31, 0x03	; 3
 4c4:	ff 2e       	mov	r15, r31
 4c6:	f0 2d       	mov	r31, r0
					mode = COOK_TIMER_MODE;
					time_print_flag = 1;
					break;
					case COOK_TIMER_MODE :
					countdown_flag = 0;
					mode = STOP_WATCH_MODE;
 4c8:	02 e0       	ldi	r16, 0x02	; 2
			//Music_player(san_rabit_bell_tune, san_rabit_bell_beat);
			if(mode == COOK_TIMER_MODE) beep(3);
			else if(mode == STOP_WATCH_MODE) beep(1);
		}*/
		
		if(time_print_flag) //ISR에서 stop_msec가 0인 경우에도 time_print_flag가 1이 되기때문에 mode를 사용해서 출력 제어 
 4ca:	80 91 98 01 	lds	r24, 0x0198	; 0x800198 <time_print_flag>
 4ce:	88 23       	and	r24, r24
 4d0:	a9 f1       	breq	.+106    	; 0x53c <main+0x9a>
		{
			if(mode == CLOCK_MODE) FND_clock(min, hour);
 4d2:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <__data_end>
 4d6:	81 11       	cpse	r24, r1
 4d8:	07 c0       	rjmp	.+14     	; 0x4e8 <main+0x46>
 4da:	60 91 7b 01 	lds	r22, 0x017B	; 0x80017b <hour>
 4de:	80 91 7c 01 	lds	r24, 0x017C	; 0x80017c <min>
 4e2:	0e 94 09 01 	call	0x212	; 0x212 <FND_clock>
 4e6:	28 c0       	rjmp	.+80     	; 0x538 <main+0x96>
			else if(mode == MODIFY_MODE) 
 4e8:	83 30       	cpi	r24, 0x03	; 3
 4ea:	39 f4       	brne	.+14     	; 0x4fa <main+0x58>
			{
				FND_clock(min, hour);
 4ec:	60 91 7b 01 	lds	r22, 0x017B	; 0x80017b <hour>
 4f0:	80 91 7c 01 	lds	r24, 0x017C	; 0x80017c <min>
 4f4:	0e 94 09 01 	call	0x212	; 0x212 <FND_clock>
 4f8:	1f c0       	rjmp	.+62     	; 0x538 <main+0x96>
						FND[1] = 0xff;
					}
				}
				*/
			}
			else if(mode == STOP_WATCH_MODE) {
 4fa:	82 30       	cpi	r24, 0x02	; 2
 4fc:	61 f4       	brne	.+24     	; 0x516 <main+0x74>
				if(w_flag) {
 4fe:	80 91 8e 01 	lds	r24, 0x018E	; 0x80018e <w_flag>
 502:	88 23       	and	r24, r24
 504:	c9 f0       	breq	.+50     	; 0x538 <main+0x96>
					FND_update_time(stop_msec, stop_sec);	
 506:	60 91 78 01 	lds	r22, 0x0178	; 0x800178 <stop_sec>
 50a:	80 91 81 01 	lds	r24, 0x0181	; 0x800181 <stop_msec>
 50e:	90 e0       	ldi	r25, 0x00	; 0
 510:	0e 94 ba 00 	call	0x174	; 0x174 <FND_update_time>
 514:	11 c0       	rjmp	.+34     	; 0x538 <main+0x96>
				}
			}
			else if(mode == COOK_TIMER_MODE) FND_clock(cook_sec, cook_min);
 516:	81 30       	cpi	r24, 0x01	; 1
 518:	39 f4       	brne	.+14     	; 0x528 <main+0x86>
 51a:	60 91 79 01 	lds	r22, 0x0179	; 0x800179 <cook_min>
 51e:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <cook_sec>
 522:	0e 94 09 01 	call	0x212	; 0x212 <FND_clock>
 526:	08 c0       	rjmp	.+16     	; 0x538 <main+0x96>
			else if(mode == ALARM_MODE) FND_clock(alarm_min, alarm_hour);
 528:	84 30       	cpi	r24, 0x04	; 4
 52a:	31 f4       	brne	.+12     	; 0x538 <main+0x96>
 52c:	60 91 8c 01 	lds	r22, 0x018C	; 0x80018c <alarm_hour>
 530:	80 91 99 01 	lds	r24, 0x0199	; 0x800199 <alarm_min>
 534:	0e 94 09 01 	call	0x212	; 0x212 <FND_clock>
			
			time_print_flag = 0;
 538:	10 92 98 01 	sts	0x0198, r1	; 0x800198 <time_print_flag>
		}
		
		
		
		if(long_key_flag) 
 53c:	80 91 89 01 	lds	r24, 0x0189	; 0x800189 <long_key_flag>
 540:	88 23       	and	r24, r24
 542:	09 f4       	brne	.+2      	; 0x546 <main+0xa4>
 544:	40 c0       	rjmp	.+128    	; 0x5c6 <main+0x124>
		{
			if(Keyscan_sub()) 
 546:	0e 94 65 01 	call	0x2ca	; 0x2ca <Keyscan_sub>
 54a:	88 23       	and	r24, r24
 54c:	09 f4       	brne	.+2      	; 0x550 <main+0xae>
 54e:	41 c0       	rjmp	.+130    	; 0x5d2 <main+0x130>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 550:	8f e9       	ldi	r24, 0x9F	; 159
 552:	9f e0       	ldi	r25, 0x0F	; 15
 554:	01 97       	sbiw	r24, 0x01	; 1
 556:	f1 f7       	brne	.-4      	; 0x554 <main+0xb2>
 558:	00 c0       	rjmp	.+0      	; 0x55a <main+0xb8>
 55a:	00 00       	nop
			{
				_delay_ms(1);
				if(Keyscan_sub())
 55c:	0e 94 65 01 	call	0x2ca	; 0x2ca <Keyscan_sub>
 560:	88 23       	and	r24, r24
 562:	b9 f1       	breq	.+110    	; 0x5d2 <main+0x130>
				{
					if(speakout_flag) {
 564:	80 91 8b 01 	lds	r24, 0x018B	; 0x80018b <speakout_flag>
 568:	88 23       	and	r24, r24
 56a:	41 f0       	breq	.+16     	; 0x57c <main+0xda>
						speakout_flag = 0; music_i = 0; OCR1A = 0;
 56c:	10 92 8b 01 	sts	0x018B, r1	; 0x80018b <speakout_flag>
 570:	10 92 94 01 	sts	0x0194, r1	; 0x800194 <music_i+0x1>
 574:	10 92 93 01 	sts	0x0193, r1	; 0x800193 <music_i>
 578:	19 82       	std	Y+1, r1	; 0x01
 57a:	18 82       	st	Y, r1
					}
				
					if(mode == CLOCK_MODE) clock_process(Keyscan_sub());
 57c:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <__data_end>
 580:	81 11       	cpse	r24, r1
 582:	03 c0       	rjmp	.+6      	; 0x58a <main+0xe8>
 584:	0e 94 65 01 	call	0x2ca	; 0x2ca <Keyscan_sub>
 588:	1b c0       	rjmp	.+54     	; 0x5c0 <main+0x11e>
					else if(mode == MODIFY_MODE) modify_process(Keyscan_sub());
 58a:	83 30       	cpi	r24, 0x03	; 3
 58c:	29 f4       	brne	.+10     	; 0x598 <main+0xf6>
 58e:	0e 94 65 01 	call	0x2ca	; 0x2ca <Keyscan_sub>
 592:	0e 94 cd 01 	call	0x39a	; 0x39a <modify_process>
 596:	14 c0       	rjmp	.+40     	; 0x5c0 <main+0x11e>
					else if(mode == COOK_TIMER_MODE) cook_timer_process(Keyscan_sub());
 598:	81 30       	cpi	r24, 0x01	; 1
 59a:	29 f4       	brne	.+10     	; 0x5a6 <main+0x104>
 59c:	0e 94 65 01 	call	0x2ca	; 0x2ca <Keyscan_sub>
 5a0:	0e 94 77 01 	call	0x2ee	; 0x2ee <cook_timer_process>
 5a4:	0d c0       	rjmp	.+26     	; 0x5c0 <main+0x11e>
					else if(mode == STOP_WATCH_MODE) stop_watch_process(Keyscan_sub());
 5a6:	82 30       	cpi	r24, 0x02	; 2
 5a8:	29 f4       	brne	.+10     	; 0x5b4 <main+0x112>
 5aa:	0e 94 65 01 	call	0x2ca	; 0x2ca <Keyscan_sub>
 5ae:	0e 94 9f 01 	call	0x33e	; 0x33e <stop_watch_process>
 5b2:	06 c0       	rjmp	.+12     	; 0x5c0 <main+0x11e>
					else if(mode == ALARM_MODE) alarm_process(Keyscan_sub());
 5b4:	84 30       	cpi	r24, 0x04	; 4
 5b6:	21 f4       	brne	.+8      	; 0x5c0 <main+0x11e>
 5b8:	0e 94 65 01 	call	0x2ca	; 0x2ca <Keyscan_sub>
 5bc:	0e 94 22 02 	call	0x444	; 0x444 <alarm_process>
					
					long_key_flag = 0;
 5c0:	10 92 89 01 	sts	0x0189, r1	; 0x800189 <long_key_flag>
 5c4:	06 c0       	rjmp	.+12     	; 0x5d2 <main+0x130>
				
			}
		}
		else 
		{
			if(Keyscan_sub() == 0) 
 5c6:	0e 94 65 01 	call	0x2ca	; 0x2ca <Keyscan_sub>
 5ca:	81 11       	cpse	r24, r1
 5cc:	02 c0       	rjmp	.+4      	; 0x5d2 <main+0x130>
			{
				long_key_flag = 1;
 5ce:	10 93 89 01 	sts	0x0189, r17	; 0x800189 <long_key_flag>
			}
		
		}
		
		//MODE KEY longkey로 입력받기
		if(long_key_keep_flag) {
 5d2:	80 91 95 01 	lds	r24, 0x0195	; 0x800195 <long_key_keep_flag>
 5d6:	88 23       	and	r24, r24
 5d8:	09 f4       	brne	.+2      	; 0x5dc <main+0x13a>
 5da:	77 cf       	rjmp	.-274    	; 0x4ca <main+0x28>
			long_key_keep_flag = 0;
 5dc:	10 92 95 01 	sts	0x0195, r1	; 0x800195 <long_key_keep_flag>
			if(Keyscan_sub() == BTN_MODE) {
 5e0:	0e 94 65 01 	call	0x2ca	; 0x2ca <Keyscan_sub>
 5e4:	81 30       	cpi	r24, 0x01	; 1
 5e6:	09 f0       	breq	.+2      	; 0x5ea <main+0x148>
 5e8:	70 cf       	rjmp	.-288    	; 0x4ca <main+0x28>
				switch(mode)
 5ea:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <__data_end>
 5ee:	82 30       	cpi	r24, 0x02	; 2
 5f0:	f1 f0       	breq	.+60     	; 0x62e <main+0x18c>
 5f2:	28 f4       	brcc	.+10     	; 0x5fe <main+0x15c>
 5f4:	88 23       	and	r24, r24
 5f6:	41 f0       	breq	.+16     	; 0x608 <main+0x166>
 5f8:	81 30       	cpi	r24, 0x01	; 1
 5fa:	91 f0       	breq	.+36     	; 0x620 <main+0x17e>
 5fc:	66 cf       	rjmp	.-308    	; 0x4ca <main+0x28>
 5fe:	83 30       	cpi	r24, 0x03	; 3
 600:	41 f0       	breq	.+16     	; 0x612 <main+0x170>
 602:	84 30       	cpi	r24, 0x04	; 4
 604:	e9 f0       	breq	.+58     	; 0x640 <main+0x19e>
 606:	61 cf       	rjmp	.-318    	; 0x4ca <main+0x28>
				{
					case CLOCK_MODE :
					mode = MODIFY_MODE;
 608:	f0 92 76 01 	sts	0x0176, r15	; 0x800176 <__data_end>
					time_print_flag = 1;
 60c:	10 93 98 01 	sts	0x0198, r17	; 0x800198 <time_print_flag>
					break;
 610:	5c cf       	rjmp	.-328    	; 0x4ca <main+0x28>
					case MODIFY_MODE :
					cursor = 0;
 612:	10 92 8a 01 	sts	0x018A, r1	; 0x80018a <cursor>
					mode = COOK_TIMER_MODE;
 616:	10 93 76 01 	sts	0x0176, r17	; 0x800176 <__data_end>
					time_print_flag = 1;
 61a:	10 93 98 01 	sts	0x0198, r17	; 0x800198 <time_print_flag>
					break;
 61e:	55 cf       	rjmp	.-342    	; 0x4ca <main+0x28>
					case COOK_TIMER_MODE :
					countdown_flag = 0;
 620:	10 92 90 01 	sts	0x0190, r1	; 0x800190 <countdown_flag>
					mode = STOP_WATCH_MODE;
 624:	00 93 76 01 	sts	0x0176, r16	; 0x800176 <__data_end>
					time_print_flag = 1;
 628:	10 93 98 01 	sts	0x0198, r17	; 0x800198 <time_print_flag>
					break;
 62c:	4e cf       	rjmp	.-356    	; 0x4ca <main+0x28>
					case STOP_WATCH_MODE :
					stop_start_flag = 0;
 62e:	10 92 8d 01 	sts	0x018D, r1	; 0x80018d <stop_start_flag>
					clear_flag = 1;
 632:	10 93 9a 01 	sts	0x019A, r17	; 0x80019a <clear_flag>
					mode = ALARM_MODE;
 636:	e0 92 76 01 	sts	0x0176, r14	; 0x800176 <__data_end>
					time_print_flag = 1;
 63a:	10 93 98 01 	sts	0x0198, r17	; 0x800198 <time_print_flag>
					break;
 63e:	45 cf       	rjmp	.-374    	; 0x4ca <main+0x28>
					case ALARM_MODE :
					mode = CLOCK_MODE;
 640:	10 92 76 01 	sts	0x0176, r1	; 0x800176 <__data_end>
					time_print_flag = 1;
 644:	10 93 98 01 	sts	0x0198, r17	; 0x800198 <time_print_flag>
					break;
 648:	40 cf       	rjmp	.-384    	; 0x4ca <main+0x28>

0000064a <beep>:
	while(ms--) _delay_ms(1);	
}

void beep(char repeat) //매개변수 : 반복횟수
{
	for(int i = 0; i < repeat; i++)
 64a:	90 e0       	ldi	r25, 0x00	; 0
 64c:	18 16       	cp	r1, r24
 64e:	19 06       	cpc	r1, r25
 650:	0c f5       	brge	.+66     	; 0x694 <beep+0x4a>
 652:	20 e0       	ldi	r18, 0x00	; 0
 654:	30 e0       	ldi	r19, 0x00	; 0
	{
		OCR1A = 500;
 656:	e8 e8       	ldi	r30, 0x88	; 136
 658:	f0 e0       	ldi	r31, 0x00	; 0
 65a:	44 ef       	ldi	r20, 0xF4	; 244
 65c:	51 e0       	ldi	r21, 0x01	; 1
 65e:	51 83       	std	Z+1, r21	; 0x01
 660:	40 83       	st	Z, r20
 662:	6f ef       	ldi	r22, 0xFF	; 255
 664:	73 ec       	ldi	r23, 0xC3	; 195
 666:	a9 e0       	ldi	r26, 0x09	; 9
 668:	61 50       	subi	r22, 0x01	; 1
 66a:	70 40       	sbci	r23, 0x00	; 0
 66c:	a0 40       	sbci	r26, 0x00	; 0
 66e:	e1 f7       	brne	.-8      	; 0x668 <beep+0x1e>
 670:	00 c0       	rjmp	.+0      	; 0x672 <beep+0x28>
 672:	00 00       	nop
		_delay_ms(200);
		OCR1A = 0;
 674:	11 82       	std	Z+1, r1	; 0x01
 676:	10 82       	st	Z, r1
 678:	6f ef       	ldi	r22, 0xFF	; 255
 67a:	73 ec       	ldi	r23, 0xC3	; 195
 67c:	a9 e0       	ldi	r26, 0x09	; 9
 67e:	61 50       	subi	r22, 0x01	; 1
 680:	70 40       	sbci	r23, 0x00	; 0
 682:	a0 40       	sbci	r26, 0x00	; 0
 684:	e1 f7       	brne	.-8      	; 0x67e <beep+0x34>
 686:	00 c0       	rjmp	.+0      	; 0x688 <beep+0x3e>
 688:	00 00       	nop
	while(ms--) _delay_ms(1);	
}

void beep(char repeat) //매개변수 : 반복횟수
{
	for(int i = 0; i < repeat; i++)
 68a:	2f 5f       	subi	r18, 0xFF	; 255
 68c:	3f 4f       	sbci	r19, 0xFF	; 255
 68e:	28 17       	cp	r18, r24
 690:	39 07       	cpc	r19, r25
 692:	29 f7       	brne	.-54     	; 0x65e <beep+0x14>
 694:	08 95       	ret

00000696 <__vector_14>:
	//OCR0A = 63; // 2000Hz
	//OCR0A = 124;							//(250 / 2) - 1 //한 주기를 1msec
	//OCR0A = 249;							//한 주기 2msec //500Hz
	//250Hz를 만들고싶다면? => OCR0A를 늘리면 오버플로우(8bit) => 분주를 늘린다
	//CS0x (분주)랑 OCR값을 이용해서 주기, 주파수 조정
	TIMSK0 |= 1 << OCIE0A;                  //0b00000010; //어떤 interrupt 걸리게 할건지 정하는	// OC0A 비교 매치 인터럽트 활성화
 696:	1f 92       	push	r1
 698:	0f 92       	push	r0
 69a:	0f b6       	in	r0, 0x3f	; 63
 69c:	0f 92       	push	r0
 69e:	11 24       	eor	r1, r1
 6a0:	2f 93       	push	r18
 6a2:	3f 93       	push	r19
 6a4:	4f 93       	push	r20
 6a6:	5f 93       	push	r21
 6a8:	6f 93       	push	r22
 6aa:	7f 93       	push	r23
 6ac:	8f 93       	push	r24
 6ae:	9f 93       	push	r25
 6b0:	af 93       	push	r26
 6b2:	bf 93       	push	r27
 6b4:	ef 93       	push	r30
 6b6:	ff 93       	push	r31
 6b8:	80 91 75 01 	lds	r24, 0x0175	; 0x800175 <start_flag>
 6bc:	88 23       	and	r24, r24
 6be:	49 f0       	breq	.+18     	; 0x6d2 <__vector_14+0x3c>
 6c0:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <msec>
 6c4:	90 91 84 01 	lds	r25, 0x0184	; 0x800184 <msec+0x1>
 6c8:	01 96       	adiw	r24, 0x01	; 1
 6ca:	90 93 84 01 	sts	0x0184, r25	; 0x800184 <msec+0x1>
 6ce:	80 93 83 01 	sts	0x0183, r24	; 0x800183 <msec>
 6d2:	80 91 8d 01 	lds	r24, 0x018D	; 0x80018d <stop_start_flag>
 6d6:	88 23       	and	r24, r24
 6d8:	49 f0       	breq	.+18     	; 0x6ec <__vector_14+0x56>
 6da:	80 91 81 01 	lds	r24, 0x0181	; 0x800181 <stop_msec>
 6de:	90 91 82 01 	lds	r25, 0x0182	; 0x800182 <stop_msec+0x1>
 6e2:	01 96       	adiw	r24, 0x01	; 1
 6e4:	90 93 82 01 	sts	0x0182, r25	; 0x800182 <stop_msec+0x1>
 6e8:	80 93 81 01 	sts	0x0181, r24	; 0x800181 <stop_msec>
 6ec:	80 91 89 01 	lds	r24, 0x0189	; 0x800189 <long_key_flag>
 6f0:	81 11       	cpse	r24, r1
 6f2:	18 c0       	rjmp	.+48     	; 0x724 <__vector_14+0x8e>
 6f4:	80 91 7f 01 	lds	r24, 0x017F	; 0x80017f <long_key_msec>
 6f8:	90 91 80 01 	lds	r25, 0x0180	; 0x800180 <long_key_msec+0x1>
 6fc:	01 96       	adiw	r24, 0x01	; 1
 6fe:	90 93 80 01 	sts	0x0180, r25	; 0x800180 <long_key_msec+0x1>
 702:	80 93 7f 01 	sts	0x017F, r24	; 0x80017f <long_key_msec>
 706:	80 91 7f 01 	lds	r24, 0x017F	; 0x80017f <long_key_msec>
 70a:	90 91 80 01 	lds	r25, 0x0180	; 0x800180 <long_key_msec+0x1>
 70e:	88 3e       	cpi	r24, 0xE8	; 232
 710:	93 40       	sbci	r25, 0x03	; 3
 712:	64 f0       	brlt	.+24     	; 0x72c <__vector_14+0x96>
 714:	10 92 80 01 	sts	0x0180, r1	; 0x800180 <long_key_msec+0x1>
 718:	10 92 7f 01 	sts	0x017F, r1	; 0x80017f <long_key_msec>
 71c:	81 e0       	ldi	r24, 0x01	; 1
 71e:	80 93 95 01 	sts	0x0195, r24	; 0x800195 <long_key_keep_flag>
 722:	04 c0       	rjmp	.+8      	; 0x72c <__vector_14+0x96>
 724:	10 92 80 01 	sts	0x0180, r1	; 0x800180 <long_key_msec+0x1>
 728:	10 92 7f 01 	sts	0x017F, r1	; 0x80017f <long_key_msec>
 72c:	80 91 8b 01 	lds	r24, 0x018B	; 0x80018b <speakout_flag>
 730:	88 23       	and	r24, r24
 732:	09 f4       	brne	.+2      	; 0x736 <__vector_14+0xa0>
 734:	87 c0       	rjmp	.+270    	; 0x844 <__vector_14+0x1ae>
 736:	80 91 96 01 	lds	r24, 0x0196	; 0x800196 <interval>
 73a:	90 91 97 01 	lds	r25, 0x0197	; 0x800197 <interval+0x1>
 73e:	89 2b       	or	r24, r25
 740:	09 f0       	breq	.+2      	; 0x744 <__vector_14+0xae>
 742:	73 c0       	rjmp	.+230    	; 0x82a <__vector_14+0x194>
 744:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <next_beat_flag>
 748:	88 23       	and	r24, r24
 74a:	09 f4       	brne	.+2      	; 0x74e <__vector_14+0xb8>
 74c:	55 c0       	rjmp	.+170    	; 0x7f8 <__vector_14+0x162>
 74e:	10 92 74 01 	sts	0x0174, r1	; 0x800174 <next_beat_flag>
 752:	e0 91 93 01 	lds	r30, 0x0193	; 0x800193 <music_i>
 756:	f0 91 94 01 	lds	r31, 0x0194	; 0x800194 <music_i+0x1>
 75a:	ee 0f       	add	r30, r30
 75c:	ff 1f       	adc	r31, r31
 75e:	e0 5c       	subi	r30, 0xC0	; 192
 760:	fe 4f       	sbci	r31, 0xFE	; 254
 762:	80 81       	ld	r24, Z
 764:	91 81       	ldd	r25, Z+1	; 0x01
 766:	89 2b       	or	r24, r25
 768:	c9 f0       	breq	.+50     	; 0x79c <__vector_14+0x106>
 76a:	e0 91 93 01 	lds	r30, 0x0193	; 0x800193 <music_i>
 76e:	f0 91 94 01 	lds	r31, 0x0194	; 0x800194 <music_i+0x1>
 772:	ee 0f       	add	r30, r30
 774:	ff 1f       	adc	r31, r31
 776:	e0 5c       	subi	r30, 0xC0	; 192
 778:	fe 4f       	sbci	r31, 0xFE	; 254
 77a:	20 81       	ld	r18, Z
 77c:	31 81       	ldd	r19, Z+1	; 0x01
 77e:	03 2e       	mov	r0, r19
 780:	00 0c       	add	r0, r0
 782:	44 0b       	sbc	r20, r20
 784:	55 0b       	sbc	r21, r21
 786:	60 e4       	ldi	r22, 0x40	; 64
 788:	72 e4       	ldi	r23, 0x42	; 66
 78a:	8f e0       	ldi	r24, 0x0F	; 15
 78c:	90 e0       	ldi	r25, 0x00	; 0
 78e:	0e 94 bc 05 	call	0xb78	; 0xb78 <__udivmodsi4>
 792:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 796:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 79a:	04 c0       	rjmp	.+8      	; 0x7a4 <__vector_14+0x10e>
 79c:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 7a0:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 7a4:	e0 91 93 01 	lds	r30, 0x0193	; 0x800193 <music_i>
 7a8:	f0 91 94 01 	lds	r31, 0x0194	; 0x800194 <music_i+0x1>
 7ac:	ee 0f       	add	r30, r30
 7ae:	ff 1f       	adc	r31, r31
 7b0:	e2 5f       	subi	r30, 0xF2	; 242
 7b2:	fe 4f       	sbci	r31, 0xFE	; 254
 7b4:	80 81       	ld	r24, Z
 7b6:	91 81       	ldd	r25, Z+1	; 0x01
 7b8:	90 93 92 01 	sts	0x0192, r25	; 0x800192 <beat+0x1>
 7bc:	80 93 91 01 	sts	0x0191, r24	; 0x800191 <beat>
 7c0:	80 91 93 01 	lds	r24, 0x0193	; 0x800193 <music_i>
 7c4:	90 91 94 01 	lds	r25, 0x0194	; 0x800194 <music_i+0x1>
 7c8:	01 96       	adiw	r24, 0x01	; 1
 7ca:	90 93 94 01 	sts	0x0194, r25	; 0x800194 <music_i+0x1>
 7ce:	80 93 93 01 	sts	0x0193, r24	; 0x800193 <music_i>
 7d2:	e0 91 93 01 	lds	r30, 0x0193	; 0x800193 <music_i>
 7d6:	f0 91 94 01 	lds	r31, 0x0194	; 0x800194 <music_i+0x1>
 7da:	ee 0f       	add	r30, r30
 7dc:	ff 1f       	adc	r31, r31
 7de:	e0 5c       	subi	r30, 0xC0	; 192
 7e0:	fe 4f       	sbci	r31, 0xFE	; 254
 7e2:	80 81       	ld	r24, Z
 7e4:	91 81       	ldd	r25, Z+1	; 0x01
 7e6:	80 33       	cpi	r24, 0x30	; 48
 7e8:	9f 42       	sbci	r25, 0x2F	; 47
 7ea:	31 f4       	brne	.+12     	; 0x7f8 <__vector_14+0x162>
 7ec:	10 92 8b 01 	sts	0x018B, r1	; 0x80018b <speakout_flag>
 7f0:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 7f4:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 7f8:	80 91 91 01 	lds	r24, 0x0191	; 0x800191 <beat>
 7fc:	90 91 92 01 	lds	r25, 0x0192	; 0x800192 <beat+0x1>
 800:	01 97       	sbiw	r24, 0x01	; 1
 802:	90 93 92 01 	sts	0x0192, r25	; 0x800192 <beat+0x1>
 806:	80 93 91 01 	sts	0x0191, r24	; 0x800191 <beat>
 80a:	80 91 91 01 	lds	r24, 0x0191	; 0x800191 <beat>
 80e:	90 91 92 01 	lds	r25, 0x0192	; 0x800192 <beat+0x1>
 812:	89 2b       	or	r24, r25
 814:	b9 f4       	brne	.+46     	; 0x844 <__vector_14+0x1ae>
 816:	81 e0       	ldi	r24, 0x01	; 1
 818:	80 93 74 01 	sts	0x0174, r24	; 0x800174 <next_beat_flag>
 81c:	8a e0       	ldi	r24, 0x0A	; 10
 81e:	90 e0       	ldi	r25, 0x00	; 0
 820:	90 93 97 01 	sts	0x0197, r25	; 0x800197 <interval+0x1>
 824:	80 93 96 01 	sts	0x0196, r24	; 0x800196 <interval>
 828:	0d c0       	rjmp	.+26     	; 0x844 <__vector_14+0x1ae>
 82a:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 82e:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 832:	80 91 96 01 	lds	r24, 0x0196	; 0x800196 <interval>
 836:	90 91 97 01 	lds	r25, 0x0197	; 0x800197 <interval+0x1>
 83a:	01 97       	sbiw	r24, 0x01	; 1
 83c:	90 93 97 01 	sts	0x0197, r25	; 0x800197 <interval+0x1>
 840:	80 93 96 01 	sts	0x0196, r24	; 0x800196 <interval>
 844:	80 91 90 01 	lds	r24, 0x0190	; 0x800190 <countdown_flag>
 848:	88 23       	and	r24, r24
 84a:	51 f1       	breq	.+84     	; 0x8a0 <__vector_14+0x20a>
 84c:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <msec>
 850:	90 91 84 01 	lds	r25, 0x0184	; 0x800184 <msec+0x1>
 854:	88 3e       	cpi	r24, 0xE8	; 232
 856:	93 40       	sbci	r25, 0x03	; 3
 858:	1c f1       	brlt	.+70     	; 0x8a0 <__vector_14+0x20a>
 85a:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <cook_sec>
 85e:	88 23       	and	r24, r24
 860:	49 f0       	breq	.+18     	; 0x874 <__vector_14+0x1de>
 862:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <cook_sec>
 866:	81 50       	subi	r24, 0x01	; 1
 868:	80 93 7a 01 	sts	0x017A, r24	; 0x80017a <cook_sec>
 86c:	81 e0       	ldi	r24, 0x01	; 1
 86e:	80 93 98 01 	sts	0x0198, r24	; 0x800198 <time_print_flag>
 872:	16 c0       	rjmp	.+44     	; 0x8a0 <__vector_14+0x20a>
 874:	80 91 7a 01 	lds	r24, 0x017A	; 0x80017a <cook_sec>
 878:	81 11       	cpse	r24, r1
 87a:	12 c0       	rjmp	.+36     	; 0x8a0 <__vector_14+0x20a>
 87c:	80 91 79 01 	lds	r24, 0x0179	; 0x800179 <cook_min>
 880:	81 11       	cpse	r24, r1
 882:	06 c0       	rjmp	.+12     	; 0x890 <__vector_14+0x1fa>
 884:	10 92 90 01 	sts	0x0190, r1	; 0x800190 <countdown_flag>
 888:	81 e0       	ldi	r24, 0x01	; 1
 88a:	80 93 8b 01 	sts	0x018B, r24	; 0x80018b <speakout_flag>
 88e:	08 c0       	rjmp	.+16     	; 0x8a0 <__vector_14+0x20a>
 890:	8c e3       	ldi	r24, 0x3C	; 60
 892:	80 93 7a 01 	sts	0x017A, r24	; 0x80017a <cook_sec>
 896:	80 91 79 01 	lds	r24, 0x0179	; 0x800179 <cook_min>
 89a:	81 50       	subi	r24, 0x01	; 1
 89c:	80 93 79 01 	sts	0x0179, r24	; 0x800179 <cook_min>
 8a0:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <msec>
 8a4:	90 91 84 01 	lds	r25, 0x0184	; 0x800184 <msec+0x1>
 8a8:	88 3e       	cpi	r24, 0xE8	; 232
 8aa:	93 40       	sbci	r25, 0x03	; 3
 8ac:	bc f1       	brlt	.+110    	; 0x91c <__stack+0x1d>
 8ae:	10 92 84 01 	sts	0x0184, r1	; 0x800184 <msec+0x1>
 8b2:	10 92 83 01 	sts	0x0183, r1	; 0x800183 <msec>
 8b6:	80 91 7d 01 	lds	r24, 0x017D	; 0x80017d <sec>
 8ba:	8f 5f       	subi	r24, 0xFF	; 255
 8bc:	80 93 7d 01 	sts	0x017D, r24	; 0x80017d <sec>
 8c0:	80 91 7d 01 	lds	r24, 0x017D	; 0x80017d <sec>
 8c4:	8c 33       	cpi	r24, 0x3C	; 60
 8c6:	50 f1       	brcs	.+84     	; 0x91c <__stack+0x1d>
 8c8:	10 92 7d 01 	sts	0x017D, r1	; 0x80017d <sec>
 8cc:	80 91 7c 01 	lds	r24, 0x017C	; 0x80017c <min>
 8d0:	8f 5f       	subi	r24, 0xFF	; 255
 8d2:	80 93 7c 01 	sts	0x017C, r24	; 0x80017c <min>
 8d6:	80 91 7c 01 	lds	r24, 0x017C	; 0x80017c <min>
 8da:	8c 33       	cpi	r24, 0x3C	; 60
 8dc:	68 f0       	brcs	.+26     	; 0x8f8 <__vector_14+0x262>
 8de:	10 92 7c 01 	sts	0x017C, r1	; 0x80017c <min>
 8e2:	80 91 7b 01 	lds	r24, 0x017B	; 0x80017b <hour>
 8e6:	8f 5f       	subi	r24, 0xFF	; 255
 8e8:	80 93 7b 01 	sts	0x017B, r24	; 0x80017b <hour>
 8ec:	80 91 7b 01 	lds	r24, 0x017B	; 0x80017b <hour>
 8f0:	8c 30       	cpi	r24, 0x0C	; 12
 8f2:	10 f0       	brcs	.+4      	; 0x8f8 <__vector_14+0x262>
 8f4:	10 92 7b 01 	sts	0x017B, r1	; 0x80017b <hour>
 8f8:	90 91 7b 01 	lds	r25, 0x017B	; 0x80017b <hour>
 8fc:	80 91 8c 01 	lds	r24, 0x018C	; 0x80018c <alarm_hour>
 900:	98 13       	cpse	r25, r24
 902:	09 c0       	rjmp	.+18     	; 0x916 <__stack+0x17>
 904:	90 91 7c 01 	lds	r25, 0x017C	; 0x80017c <min>
 908:	80 91 99 01 	lds	r24, 0x0199	; 0x800199 <alarm_min>
 90c:	98 13       	cpse	r25, r24
 90e:	03 c0       	rjmp	.+6      	; 0x916 <__stack+0x17>
 910:	81 e0       	ldi	r24, 0x01	; 1
 912:	80 93 8b 01 	sts	0x018B, r24	; 0x80018b <speakout_flag>
 916:	81 e0       	ldi	r24, 0x01	; 1
 918:	80 93 98 01 	sts	0x0198, r24	; 0x800198 <time_print_flag>
 91c:	80 91 81 01 	lds	r24, 0x0181	; 0x800181 <stop_msec>
 920:	90 91 82 01 	lds	r25, 0x0182	; 0x800182 <stop_msec+0x1>
 924:	88 3e       	cpi	r24, 0xE8	; 232
 926:	93 40       	sbci	r25, 0x03	; 3
 928:	d4 f0       	brlt	.+52     	; 0x95e <__stack+0x5f>
 92a:	10 92 82 01 	sts	0x0182, r1	; 0x800182 <stop_msec+0x1>
 92e:	10 92 81 01 	sts	0x0181, r1	; 0x800181 <stop_msec>
 932:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <stop_sec>
 936:	8f 5f       	subi	r24, 0xFF	; 255
 938:	80 93 78 01 	sts	0x0178, r24	; 0x800178 <stop_sec>
 93c:	80 91 78 01 	lds	r24, 0x0178	; 0x800178 <stop_sec>
 940:	8c 33       	cpi	r24, 0x3C	; 60
 942:	68 f0       	brcs	.+26     	; 0x95e <__stack+0x5f>
 944:	10 92 78 01 	sts	0x0178, r1	; 0x800178 <stop_sec>
 948:	80 91 77 01 	lds	r24, 0x0177	; 0x800177 <stop_min>
 94c:	8f 5f       	subi	r24, 0xFF	; 255
 94e:	80 93 77 01 	sts	0x0177, r24	; 0x800177 <stop_min>
 952:	80 91 77 01 	lds	r24, 0x0177	; 0x800177 <stop_min>
 956:	8c 33       	cpi	r24, 0x3C	; 60
 958:	10 f0       	brcs	.+4      	; 0x95e <__stack+0x5f>
 95a:	10 92 77 01 	sts	0x0177, r1	; 0x800177 <stop_min>
 95e:	80 91 81 01 	lds	r24, 0x0181	; 0x800181 <stop_msec>
 962:	90 91 82 01 	lds	r25, 0x0182	; 0x800182 <stop_msec+0x1>
 966:	6a e0       	ldi	r22, 0x0A	; 10
 968:	70 e0       	ldi	r23, 0x00	; 0
 96a:	0e 94 a8 05 	call	0xb50	; 0xb50 <__divmodhi4>
 96e:	89 2b       	or	r24, r25
 970:	39 f4       	brne	.+14     	; 0x980 <__stack+0x81>
 972:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <__data_end>
 976:	82 30       	cpi	r24, 0x02	; 2
 978:	19 f4       	brne	.+6      	; 0x980 <__stack+0x81>
 97a:	81 e0       	ldi	r24, 0x01	; 1
 97c:	80 93 98 01 	sts	0x0198, r24	; 0x800198 <time_print_flag>
 980:	80 91 9a 01 	lds	r24, 0x019A	; 0x80019a <clear_flag>
 984:	88 23       	and	r24, r24
 986:	79 f0       	breq	.+30     	; 0x9a6 <__stack+0xa7>
 988:	10 92 9a 01 	sts	0x019A, r1	; 0x80019a <clear_flag>
 98c:	81 e0       	ldi	r24, 0x01	; 1
 98e:	80 93 98 01 	sts	0x0198, r24	; 0x800198 <time_print_flag>
 992:	80 93 8e 01 	sts	0x018E, r24	; 0x80018e <w_flag>
 996:	10 92 82 01 	sts	0x0182, r1	; 0x800182 <stop_msec+0x1>
 99a:	10 92 81 01 	sts	0x0181, r1	; 0x800181 <stop_msec>
 99e:	10 92 78 01 	sts	0x0178, r1	; 0x800178 <stop_sec>
 9a2:	10 92 77 01 	sts	0x0177, r1	; 0x800177 <stop_min>
 9a6:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <i>
 9aa:	8f 5f       	subi	r24, 0xFF	; 255
 9ac:	80 93 7e 01 	sts	0x017E, r24	; 0x80017e <i>
 9b0:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <i>
 9b4:	84 30       	cpi	r24, 0x04	; 4
 9b6:	10 f0       	brcs	.+4      	; 0x9bc <__stack+0xbd>
 9b8:	10 92 7e 01 	sts	0x017E, r1	; 0x80017e <i>
 9bc:	8b b1       	in	r24, 0x0b	; 11
 9be:	8f 70       	andi	r24, 0x0F	; 15
 9c0:	8b b9       	out	0x0b, r24	; 11
 9c2:	e0 91 7e 01 	lds	r30, 0x017E	; 0x80017e <i>
 9c6:	f0 e0       	ldi	r31, 0x00	; 0
 9c8:	eb 57       	subi	r30, 0x7B	; 123
 9ca:	fe 4f       	sbci	r31, 0xFE	; 254
 9cc:	80 81       	ld	r24, Z
 9ce:	0e 94 53 00 	call	0xa6	; 0xa6 <FND_shift_out>
 9d2:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <__data_end>
 9d6:	81 30       	cpi	r24, 0x01	; 1
 9d8:	71 f4       	brne	.+28     	; 0x9f6 <__stack+0xf7>
 9da:	e5 e8       	ldi	r30, 0x85	; 133
 9dc:	f1 e0       	ldi	r31, 0x01	; 1
 9de:	82 81       	ldd	r24, Z+2	; 0x02
 9e0:	8d 7f       	andi	r24, 0xFD	; 253
 9e2:	82 83       	std	Z+2, r24	; 0x02
 9e4:	e0 91 7e 01 	lds	r30, 0x017E	; 0x80017e <i>
 9e8:	9b b1       	in	r25, 0x0b	; 11
 9ea:	f0 e0       	ldi	r31, 0x00	; 0
 9ec:	e0 50       	subi	r30, 0x00	; 0
 9ee:	ff 4f       	sbci	r31, 0xFF	; 255
 9f0:	80 81       	ld	r24, Z
 9f2:	89 2b       	or	r24, r25
 9f4:	8b b9       	out	0x0b, r24	; 11
 9f6:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <__data_end>
 9fa:	83 30       	cpi	r24, 0x03	; 3
 9fc:	c1 f5       	brne	.+112    	; 0xa6e <__stack+0x16f>
 9fe:	e5 e8       	ldi	r30, 0x85	; 133
 a00:	f1 e0       	ldi	r31, 0x01	; 1
 a02:	82 81       	ldd	r24, Z+2	; 0x02
 a04:	8d 7f       	andi	r24, 0xFD	; 253
 a06:	82 83       	std	Z+2, r24	; 0x02
 a08:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <msec>
 a0c:	90 91 84 01 	lds	r25, 0x0184	; 0x800184 <msec+0x1>
 a10:	85 3f       	cpi	r24, 0xF5	; 245
 a12:	91 40       	sbci	r25, 0x01	; 1
 a14:	54 f4       	brge	.+20     	; 0xa2a <__stack+0x12b>
 a16:	e0 91 7e 01 	lds	r30, 0x017E	; 0x80017e <i>
 a1a:	9b b1       	in	r25, 0x0b	; 11
 a1c:	f0 e0       	ldi	r31, 0x00	; 0
 a1e:	e0 50       	subi	r30, 0x00	; 0
 a20:	ff 4f       	sbci	r31, 0xFF	; 255
 a22:	80 81       	ld	r24, Z
 a24:	89 2b       	or	r24, r25
 a26:	8b b9       	out	0x0b, r24	; 11
 a28:	64 c0       	rjmp	.+200    	; 0xaf2 <__stack+0x1f3>
 a2a:	80 91 8a 01 	lds	r24, 0x018A	; 0x80018a <cursor>
 a2e:	88 23       	and	r24, r24
 a30:	79 f0       	breq	.+30     	; 0xa50 <__stack+0x151>
 a32:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <i>
 a36:	82 30       	cpi	r24, 0x02	; 2
 a38:	08 f0       	brcs	.+2      	; 0xa3c <__stack+0x13d>
 a3a:	5b c0       	rjmp	.+182    	; 0xaf2 <__stack+0x1f3>
 a3c:	e0 91 7e 01 	lds	r30, 0x017E	; 0x80017e <i>
 a40:	9b b1       	in	r25, 0x0b	; 11
 a42:	f0 e0       	ldi	r31, 0x00	; 0
 a44:	e0 50       	subi	r30, 0x00	; 0
 a46:	ff 4f       	sbci	r31, 0xFF	; 255
 a48:	80 81       	ld	r24, Z
 a4a:	89 2b       	or	r24, r25
 a4c:	8b b9       	out	0x0b, r24	; 11
 a4e:	51 c0       	rjmp	.+162    	; 0xaf2 <__stack+0x1f3>
 a50:	80 91 7e 01 	lds	r24, 0x017E	; 0x80017e <i>
 a54:	82 30       	cpi	r24, 0x02	; 2
 a56:	08 f4       	brcc	.+2      	; 0xa5a <__stack+0x15b>
 a58:	4c c0       	rjmp	.+152    	; 0xaf2 <__stack+0x1f3>
 a5a:	e0 91 7e 01 	lds	r30, 0x017E	; 0x80017e <i>
 a5e:	9b b1       	in	r25, 0x0b	; 11
 a60:	f0 e0       	ldi	r31, 0x00	; 0
 a62:	e0 50       	subi	r30, 0x00	; 0
 a64:	ff 4f       	sbci	r31, 0xFF	; 255
 a66:	80 81       	ld	r24, Z
 a68:	89 2b       	or	r24, r25
 a6a:	8b b9       	out	0x0b, r24	; 11
 a6c:	42 c0       	rjmp	.+132    	; 0xaf2 <__stack+0x1f3>
 a6e:	81 11       	cpse	r24, r1
 a70:	1c c0       	rjmp	.+56     	; 0xaaa <__stack+0x1ab>
 a72:	80 91 83 01 	lds	r24, 0x0183	; 0x800183 <msec>
 a76:	90 91 84 01 	lds	r25, 0x0184	; 0x800184 <msec+0x1>
 a7a:	85 3f       	cpi	r24, 0xF5	; 245
 a7c:	91 40       	sbci	r25, 0x01	; 1
 a7e:	34 f4       	brge	.+12     	; 0xa8c <__stack+0x18d>
 a80:	e5 e8       	ldi	r30, 0x85	; 133
 a82:	f1 e0       	ldi	r31, 0x01	; 1
 a84:	82 81       	ldd	r24, Z+2	; 0x02
 a86:	8d 7f       	andi	r24, 0xFD	; 253
 a88:	82 83       	std	Z+2, r24	; 0x02
 a8a:	05 c0       	rjmp	.+10     	; 0xa96 <__stack+0x197>
 a8c:	e5 e8       	ldi	r30, 0x85	; 133
 a8e:	f1 e0       	ldi	r31, 0x01	; 1
 a90:	82 81       	ldd	r24, Z+2	; 0x02
 a92:	82 60       	ori	r24, 0x02	; 2
 a94:	82 83       	std	Z+2, r24	; 0x02
 a96:	e0 91 7e 01 	lds	r30, 0x017E	; 0x80017e <i>
 a9a:	9b b1       	in	r25, 0x0b	; 11
 a9c:	f0 e0       	ldi	r31, 0x00	; 0
 a9e:	e0 50       	subi	r30, 0x00	; 0
 aa0:	ff 4f       	sbci	r31, 0xFF	; 255
 aa2:	80 81       	ld	r24, Z
 aa4:	89 2b       	or	r24, r25
 aa6:	8b b9       	out	0x0b, r24	; 11
 aa8:	24 c0       	rjmp	.+72     	; 0xaf2 <__stack+0x1f3>
 aaa:	84 30       	cpi	r24, 0x04	; 4
 aac:	c9 f4       	brne	.+50     	; 0xae0 <__stack+0x1e1>
 aae:	80 91 8f 01 	lds	r24, 0x018F	; 0x80018f <alarm_enable_flag>
 ab2:	88 23       	and	r24, r24
 ab4:	31 f0       	breq	.+12     	; 0xac2 <__stack+0x1c3>
 ab6:	e5 e8       	ldi	r30, 0x85	; 133
 ab8:	f1 e0       	ldi	r31, 0x01	; 1
 aba:	82 81       	ldd	r24, Z+2	; 0x02
 abc:	8d 7f       	andi	r24, 0xFD	; 253
 abe:	82 83       	std	Z+2, r24	; 0x02
 ac0:	05 c0       	rjmp	.+10     	; 0xacc <__stack+0x1cd>
 ac2:	e5 e8       	ldi	r30, 0x85	; 133
 ac4:	f1 e0       	ldi	r31, 0x01	; 1
 ac6:	82 81       	ldd	r24, Z+2	; 0x02
 ac8:	82 60       	ori	r24, 0x02	; 2
 aca:	82 83       	std	Z+2, r24	; 0x02
 acc:	e0 91 7e 01 	lds	r30, 0x017E	; 0x80017e <i>
 ad0:	9b b1       	in	r25, 0x0b	; 11
 ad2:	f0 e0       	ldi	r31, 0x00	; 0
 ad4:	e0 50       	subi	r30, 0x00	; 0
 ad6:	ff 4f       	sbci	r31, 0xFF	; 255
 ad8:	80 81       	ld	r24, Z
 ada:	89 2b       	or	r24, r25
 adc:	8b b9       	out	0x0b, r24	; 11
 ade:	09 c0       	rjmp	.+18     	; 0xaf2 <__stack+0x1f3>
 ae0:	e0 91 7e 01 	lds	r30, 0x017E	; 0x80017e <i>
 ae4:	9b b1       	in	r25, 0x0b	; 11
 ae6:	f0 e0       	ldi	r31, 0x00	; 0
 ae8:	e0 50       	subi	r30, 0x00	; 0
 aea:	ff 4f       	sbci	r31, 0xFF	; 255
 aec:	80 81       	ld	r24, Z
 aee:	89 2b       	or	r24, r25
 af0:	8b b9       	out	0x0b, r24	; 11
 af2:	ff 91       	pop	r31
 af4:	ef 91       	pop	r30
 af6:	bf 91       	pop	r27
 af8:	af 91       	pop	r26
 afa:	9f 91       	pop	r25
 afc:	8f 91       	pop	r24
 afe:	7f 91       	pop	r23
 b00:	6f 91       	pop	r22
 b02:	5f 91       	pop	r21
 b04:	4f 91       	pop	r20
 b06:	3f 91       	pop	r19
 b08:	2f 91       	pop	r18
 b0a:	0f 90       	pop	r0
 b0c:	0f be       	out	0x3f, r0	; 63
 b0e:	0f 90       	pop	r0
 b10:	1f 90       	pop	r1
 b12:	18 95       	reti

00000b14 <Timer0_init>:
 b14:	84 b5       	in	r24, 0x24	; 36
 b16:	82 60       	ori	r24, 0x02	; 2
 b18:	84 bd       	out	0x24, r24	; 36
 b1a:	85 b5       	in	r24, 0x25	; 37
 b1c:	83 60       	ori	r24, 0x03	; 3
 b1e:	85 bd       	out	0x25, r24	; 37
 b20:	89 ef       	ldi	r24, 0xF9	; 249
 b22:	87 bd       	out	0x27, r24	; 39
 b24:	ee e6       	ldi	r30, 0x6E	; 110
 b26:	f0 e0       	ldi	r31, 0x00	; 0
 b28:	80 81       	ld	r24, Z
 b2a:	82 60       	ori	r24, 0x02	; 2
 b2c:	80 83       	st	Z, r24
 b2e:	08 95       	ret

00000b30 <Timer1_init_CTC_outA>:
	return;
}

void Timer1_init_CTC_outA(void) //A 출력을 쓰기위한 초기화 함수
{
	DDRB |= 1 << PORTB1;
 b30:	21 9a       	sbi	0x04, 1	; 4
	TCCR1A |= 1 << COM1A0; //TOGGLE
 b32:	e0 e8       	ldi	r30, 0x80	; 128
 b34:	f0 e0       	ldi	r31, 0x00	; 0
 b36:	80 81       	ld	r24, Z
 b38:	80 64       	ori	r24, 0x40	; 64
 b3a:	80 83       	st	Z, r24
	TCCR1B |= 1 << WGM12 | 1 <<  CS11;  //CTC 모드//64분주
 b3c:	e1 e8       	ldi	r30, 0x81	; 129
 b3e:	f0 e0       	ldi	r31, 0x00	; 0
 b40:	80 81       	ld	r24, Z
 b42:	8a 60       	ori	r24, 0x0A	; 10
 b44:	80 83       	st	Z, r24
	OCR1A = 0; // 소리 끄기
 b46:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
 b4a:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
 b4e:	08 95       	ret

00000b50 <__divmodhi4>:
 b50:	97 fb       	bst	r25, 7
 b52:	07 2e       	mov	r0, r23
 b54:	16 f4       	brtc	.+4      	; 0xb5a <__divmodhi4+0xa>
 b56:	00 94       	com	r0
 b58:	07 d0       	rcall	.+14     	; 0xb68 <__divmodhi4_neg1>
 b5a:	77 fd       	sbrc	r23, 7
 b5c:	09 d0       	rcall	.+18     	; 0xb70 <__divmodhi4_neg2>
 b5e:	0e 94 de 05 	call	0xbbc	; 0xbbc <__udivmodhi4>
 b62:	07 fc       	sbrc	r0, 7
 b64:	05 d0       	rcall	.+10     	; 0xb70 <__divmodhi4_neg2>
 b66:	3e f4       	brtc	.+14     	; 0xb76 <__divmodhi4_exit>

00000b68 <__divmodhi4_neg1>:
 b68:	90 95       	com	r25
 b6a:	81 95       	neg	r24
 b6c:	9f 4f       	sbci	r25, 0xFF	; 255
 b6e:	08 95       	ret

00000b70 <__divmodhi4_neg2>:
 b70:	70 95       	com	r23
 b72:	61 95       	neg	r22
 b74:	7f 4f       	sbci	r23, 0xFF	; 255

00000b76 <__divmodhi4_exit>:
 b76:	08 95       	ret

00000b78 <__udivmodsi4>:
 b78:	a1 e2       	ldi	r26, 0x21	; 33
 b7a:	1a 2e       	mov	r1, r26
 b7c:	aa 1b       	sub	r26, r26
 b7e:	bb 1b       	sub	r27, r27
 b80:	fd 01       	movw	r30, r26
 b82:	0d c0       	rjmp	.+26     	; 0xb9e <__udivmodsi4_ep>

00000b84 <__udivmodsi4_loop>:
 b84:	aa 1f       	adc	r26, r26
 b86:	bb 1f       	adc	r27, r27
 b88:	ee 1f       	adc	r30, r30
 b8a:	ff 1f       	adc	r31, r31
 b8c:	a2 17       	cp	r26, r18
 b8e:	b3 07       	cpc	r27, r19
 b90:	e4 07       	cpc	r30, r20
 b92:	f5 07       	cpc	r31, r21
 b94:	20 f0       	brcs	.+8      	; 0xb9e <__udivmodsi4_ep>
 b96:	a2 1b       	sub	r26, r18
 b98:	b3 0b       	sbc	r27, r19
 b9a:	e4 0b       	sbc	r30, r20
 b9c:	f5 0b       	sbc	r31, r21

00000b9e <__udivmodsi4_ep>:
 b9e:	66 1f       	adc	r22, r22
 ba0:	77 1f       	adc	r23, r23
 ba2:	88 1f       	adc	r24, r24
 ba4:	99 1f       	adc	r25, r25
 ba6:	1a 94       	dec	r1
 ba8:	69 f7       	brne	.-38     	; 0xb84 <__udivmodsi4_loop>
 baa:	60 95       	com	r22
 bac:	70 95       	com	r23
 bae:	80 95       	com	r24
 bb0:	90 95       	com	r25
 bb2:	9b 01       	movw	r18, r22
 bb4:	ac 01       	movw	r20, r24
 bb6:	bd 01       	movw	r22, r26
 bb8:	cf 01       	movw	r24, r30
 bba:	08 95       	ret

00000bbc <__udivmodhi4>:
 bbc:	aa 1b       	sub	r26, r26
 bbe:	bb 1b       	sub	r27, r27
 bc0:	51 e1       	ldi	r21, 0x11	; 17
 bc2:	07 c0       	rjmp	.+14     	; 0xbd2 <__udivmodhi4_ep>

00000bc4 <__udivmodhi4_loop>:
 bc4:	aa 1f       	adc	r26, r26
 bc6:	bb 1f       	adc	r27, r27
 bc8:	a6 17       	cp	r26, r22
 bca:	b7 07       	cpc	r27, r23
 bcc:	10 f0       	brcs	.+4      	; 0xbd2 <__udivmodhi4_ep>
 bce:	a6 1b       	sub	r26, r22
 bd0:	b7 0b       	sbc	r27, r23

00000bd2 <__udivmodhi4_ep>:
 bd2:	88 1f       	adc	r24, r24
 bd4:	99 1f       	adc	r25, r25
 bd6:	5a 95       	dec	r21
 bd8:	a9 f7       	brne	.-22     	; 0xbc4 <__udivmodhi4_loop>
 bda:	80 95       	com	r24
 bdc:	90 95       	com	r25
 bde:	bc 01       	movw	r22, r24
 be0:	cd 01       	movw	r24, r26
 be2:	08 95       	ret

00000be4 <_exit>:
 be4:	f8 94       	cli

00000be6 <__stop_program>:
 be6:	ff cf       	rjmp	.-2      	; 0xbe6 <__stop_program>
